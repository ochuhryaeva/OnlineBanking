@using OlnlineBanking.Models
@model OlnlineBanking.Models.ClientListViewModel

@{
    ViewBag.Title = "Index";
}

<div>
    <div class="top-actions">
        @using (Html.BeginForm("Index", "Client", FormMethod.Get))
        {
            @Html.Hidden("page",1)
            @Html.Hidden("sortedField", Model.SortedInfo.SortedField)
            @Html.Hidden("sortedOrder",Model.SortedInfo.SortedOrder)
            @Html.DropDownListFor(m => m.StatusFilter,
                new SelectList(new[] { "All" }.Concat(Enum.GetNames(typeof(ClientStatus))), Model.StatusFilter.ToString()))
            <input type="submit" value="filter" />
        }
        @Html.ActionLink("Add a new client", "Add", new { returnUrl = Request.Url.PathAndQuery })
    </div>

    <table class="grid-data">
        <tr>
            <th>
                @Html.ActionLink("Client Contract Number", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "contractnumber",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "contractnumber" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("Last Name", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "lastname",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "lastname" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("First Name", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "firstname",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "firstname" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("Date Of Birth", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "dateofbirth",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "dateofbirth" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("Phone Number", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "phone",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "phone" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("Status", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "status",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "status" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>
                @Html.ActionLink("Deposit", "Index", new
                {
                    page = @Model.PagingInfo.CurrentPage,
                    sortedField = "deposit",
                    sortedOrder = (Model.SortedInfo.SortedField.ToLower() == "deposit" && Model.SortedInfo.SortedOrder == Ordering.Asc) ? Ordering.Desc : Ordering.Asc,
                    statusFilter = Model.StatusFilter
                })
            </th>
            <th>Actions</th>
        </tr>
        @foreach (var item in Model.Clients)
        {
            <tr ondblclick=" location.href='@Url.Action("Edit", "Client", new {id = item.Id, returnUrl = Request.Url.PathAndQuery})' ">
                <td>@item.ContractNumber</td>
                <td>@item.LastName</td>
                <td>@item.FirstName</td>
                <td>@item.DateOfBirth.ToShortDateString()</td>
                <td>@item.Phone</td>
                <td>@item.Status</td>
                <td><label>@Html.CheckBoxFor(m => item.Deposit, new { @class = "hidden", disabled = "disabled" })<i class="checkbox"></i></label></td>
                <td>
                    @using (Html.BeginForm("Delete", "Client", FormMethod.Post, new { onsubmit = "return confirm('Do you really want to delete this client?')" }))
                    {
                        @Html.Hidden("returnUrl", Request.Url.PathAndQuery)
                        @Html.Hidden("Id", item.Id)
                        <input type="submit" value="Delete" />
                    }
                </td>
            </tr>
        }
    </table>
    <div class="pager">
        @Html.Pages(Model.PagingInfo, p => Url.Action("Index", new
        {
            page = p,
            sortedField = Model.SortedInfo.SortedField,
            sortedOrder = Model.SortedInfo.SortedOrder,
            statusFilter = Model.StatusFilter
        }))
    </div>
</div>
